openapi: 3.0.0
info:
  title: OneZero Project
  description: Simple CRUD API.
  version: 0.1.9
  contact:
    email: joaovictorbronzatti@gmail.com
    url: https://github.com/jBronzatti
servers:
  - url: http://localhost:3000/users
    description: Server will run in http://localhost:port/users, depending on which port you have saved in .env file, stardard is 3000 
paths:
  /users:
    post:
      tags:
        - user
      summary: Add a new user
      description: Create a new user
      operationId: createUser
      requestBody:
        description: Create a new User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad user input
        '500':
          description: Server problem
    get:
      tags:
        - user
      summary: Returns a list of users.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The number of the page you want to consult
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items per page to return
      description: Returns a list of users.
      operationId: getAllUsers
      responses:
        '200': 
          description: A JSON array of users
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/User'
        '500':
          description: Server problem
  /users/{email}:
    get:
      tags:
        - user
      summary: Find user by email
      description: Returns a single user
      operationId: getUser
      parameters:
        - name: email
          in: path
          description: Email of user to return
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '204':
          description: User not found
        '500':
          description: Server problem
    delete:
      tags:
        - user
      summary: Deletes an user
      description: Deletes an user by email
      operationId: deleteUser
      parameters:
        - name: email
          in: path
          description: User ID to delete
          required: true
          schema:
            type: integer
            format: email
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not found
        '500':
          description: Server problem
  /users/{Id}:
    put:
      tags:
        - user
      summary: Update an existing user
      description: Update an existing user by Id
      operationId: updateUser
      parameters:
        - name: userID
          in: path
          description: User id to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad user input
        '500':
          description: Server problem
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
          readOnly: true
        nome:
          type: string
          example: Jo√£o
        email:
          type: string
          format: email
          example: john@email.com
        idade:
          type: integer
          minimum: 18
          example: 23
        createdAT:
          type: string
          description: Date user has been created
          format: date
          example: 2022-07-23T13:55:41.268Z
          readOnly: true
        updatedAT:
          type: string
          description: Date user has been updadted
          format: date
          example: 2022-08-23T13:55:41.268Z
          readOnly: true
      required:
        - nome
        - email
        - idade
      xml:
        name: user